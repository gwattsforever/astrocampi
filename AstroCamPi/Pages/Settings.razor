@page "/settings"
@inject AstroLib.Model.SettingsService SettingsService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<h3>Configurations</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col" >Name</th>
            <th scope="col" ></th>
        </tr>
        </thead>
    <tbody>
        @foreach (var c in SettingsService.Settings.OrderBy(x => x.Name))
        {
            <tr class="tbl">
                <td>@c.Name</td>
                <td >
                    <div class="btn-group">
                        <button class="btn btn-primary" @onclick="(() => Edit_Clicked(c))">Edit</button>
                        <button class="btn btn-secondary" @onclick="(() => Copy_Clicked(c))">Copy</button>
                        <button class="btn btn-danger" @onclick="(() => Delete_Clicked(c))">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private void Edit_Clicked(AstroLib.Model.SettingConfig config)
    {
        NavManager.NavigateTo(string.Format("/settings/{0}", config.Name));
    }

    private async void Copy_Clicked(AstroLib.Model.SettingConfig config)
    {
        try
        {
            string name = await JSRuntime.InvokeAsync<string>("prompt", "New Config Name");
            if (string.IsNullOrWhiteSpace(name))
                return;


            SettingsService.AddConfig(config.Clone(name));

            StateHasChanged();
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", string.Format("Failed to copy '{0}' - {1}", config.Name, ex.Message));
        }
    }

    private async void Delete_Clicked(AstroLib.Model.SettingConfig config)
    {
        try
        {
            bool delete = await JSRuntime.InvokeAsync<bool>("confirm", string.Format("Are you sure you want to delete '{0}'?", config.Name));
            if (delete)
            {
                SettingsService.DeleteConfig(config);
            }
            StateHasChanged();
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", string.Format("Failed to delete '{0}' - {1}", config.Name, ex.Message));
        }
    }
}
